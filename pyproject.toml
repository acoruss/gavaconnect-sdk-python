[project]
name = "gavaconnect-sdk-python"
version = "0.2.1"
description = "Python SDK for GavaConnect API"
readme = "README.md"
authors = [
    { name = "Acoruss", email = "acoruss+sdks@gmail.com" },
    { name = "Musale Martin", email = "martinmshale@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "httpx>=0.28.1",
]
license = { text = "MIT" }
keywords = ["gavaconnect", "sdk", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.25.0",
    "respx>=0.22.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "bandit>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/acoruss/gavaconnect-sdk-python"
Repository = "https://github.com/acoruss/gavaconnect-sdk-python"
Documentation = "https://github.com/acoruss/gavaconnect-sdk-python#readme"
Issues = "https://github.com/acoruss/gavaconnect-sdk-python/issues"

[project.scripts]
gavaconnect-sdk-python = "gavaconnect:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.setuptools.package-data]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = ["E","F","I","UP","B","N","ANN","D"]

ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (pytest uses assert)
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN201", "D103", "D100"]  # Allow assert in tests, missing return types and docstrings

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "asyncio: mark test as asyncio",
]

# Coverage configuration
[tool.coverage.run]
source = ["gavaconnect"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["gavaconnect"]
include = [
    "gavaconnect/py.typed"
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=0.25.0",
    "respx>=0.22.0",
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "h2>=4.2.0",
]
